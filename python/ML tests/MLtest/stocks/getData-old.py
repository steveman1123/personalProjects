#take in history from csv file generated by otherfxns.getHistory()
#append column titled class of whether price increased or not
#write to .data file without index or header

#TODO:
#should incorporate other stock info like news (headlines as word clouds), technical indicators, fundamentals
#also generate company data organized by fundamentals and the Y values of increasing value over a given period of time

import pandas as pd
import datetime as dt
import sys, time, json, requests

HEADERS={"user-agent":"-","contact":"github.com/steveman1123"}

#use the new nasdaq api to return in the same format as getHistory
#this does NOT save the csv file
#TODO: shouldn't be an issue for this case, but here's some logic:
#   if(todate-fromdate<22 and todate>1 month ago): 0-1 days will be returned
def getHistory(symb, startDate, endDate=str(dt.date.today()), maxTries=3):
  if(endDate<=startDate):
    print("Invalid Date Data (end<=start)")
    return []
  
  maxDays = 5000 #max rows returned per request (~250 per year - so 5000=20 years max)
  tries=1
  j = {}
  while tries<=maxTries: #get the first set of dates
    try:
      j = json.loads(requests.get(f'https://api.nasdaq.com/api/quote/{symb}/historical?assetclass=stocks&fromdate={startDate}&todate={endDate}&limit={maxDays}',headers=HEADERS).text)
      break
    except Exception:
      print(f"Error in getHistory for {symb}. Trying again ({tries}/{maxTries})...")
      tries += 1
      time.sleep(3)
      pass
  
  if(tries>maxTries or j['data'] is None or j['data']['totalRecords']==0): #this could have a failure if the stock isn't found/returns nothing. More testing might be needed
    print(f"Failed to get {symb} history")
    return []
  else: #something's fucky with this api, jsyk
    if(j['data']['totalRecords']>maxDays): #get subsequent sets
      for i in range(1,ceil(j['data']['totalRecords']/(maxDays+1))):
        tries=1
        while tries<=maxTries:
          try:
            r = json.loads(requests.get(f'https://api.nasdaq.com/api/quote/{symb}/historical?assetclass=stocks&fromdate={startDate}&todate={endDate}&offset={i*(maxDays)}',headers=HEADERS).text)
            j['data']['tradesTable']['rows'] += r['data']['tradesTable']['rows'] #append the sets together
            break
          except Exception:
            print(f"Error in getHistory for {symb} index {i}. Trying again ({tries}/{maxTries})...")
            time.sleep(3)
            pass
          tries += 1
    
    #format the data to return the same as getHistory
    #2d array order of Date, Close/Last, Volume, Open, High, Low sorted by dates newest to oldest
    try:
      j = json.loads(json.dumps(j).replace('$','')) #remove $ characters
      out = [[e['date'],e['close'],e['volume'].replace(',',''),e['open'],e['high'],e['low']] for e in j['data']['tradesTable']['rows']]
    except Exception:
      out = []
      print("Failed to get history")
    return out







if(len(sys.argv)==3):
  symb = sys.argv[1]
  startDate=sys.argv[2]
else:
  raise ValueError("Must have exactly 2 arguments of the stock symbol and start date in yyyy-mm-dd format (eg: msft 2020-01-01)")



outFile = f"./{symb}-prices.data"

print("getting history")
hist = getHistory(symb,startDate)
print(hist[:10])

print("converting array types")
df = pd.DataFrame(hist)
df.columns = ["Date", "Close/Last", "Volume", "Open", "High", "Low"]

print(df)

print("calculating changes")
df['class'] = df['Close/Last']>df.shift(1)['Close/Last']

print("writing file")
df.to_csv(outFile,header=False,index=False)
print("done")
