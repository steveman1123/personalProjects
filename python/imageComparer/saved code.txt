'''
The goal of this is to take two similar images and compare any differences between them
for the sake of distance detection using parallax

Resources:
http://www.scipy-lectures.org/advanced/image_processing/
https://stackoverflow.com/questions/7185655/applying-the-sobel-filter-using-scipy#7186582
https://stackoverflow.com/questions/1819124/image-comparison-algorithm

'''
'''
import numpy as np
import scipy
from scipy import misc, ndimage

imgDisth = 10; #distance apart the images were taken horizontally (cm)
imgDistv = 0.5; #distance apart the images were taken vertically (cm)


for i in range(1,3):
  print(i)
  im = misc.imread('F:\\Downloads\\room'+str(i)+'.jpg')
  im = im.astype('int32')
  dx = ndimage.sobel(im, 0)  # horizontal derivative
  dy = ndimage.sobel(im, 1)  # vertical derivative
  mag = np.hypot(dx, dy)  # magnitude
  mag *= 255.0 / np.max(mag)  # normalize (Q&D)
  misc.imsave('sobel'+str(i)+'.jpg', mag)
'''

'''
from sys import version
import numpy as np
import cv2

print("cv2 version: ", cv2.__version__)
print("python version: ", version)

imgL = cv2.imread('keys1.jpg',0) #stored as 2D array
imgR = cv2.imread('keys2.jpg',0)

disparity =

cv2.imshow("L", imgL)
cv2.imshow("R", imgR)


cv2.waitKey(0)
cv2.destroyAllWindows()

'''

'''
import cv2

image = cv2.imread("cat.png")
grey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2.imshow("Over the Clouds", image)
cv2.imshow("Over the Clouds - gray", grey)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''
#get images, convert to greyscale, detect edges


#determine edge positions relative to one another


#do some fancy math (trig) to determine their distances



#!/usr/bin/env python

'''
Simple example of stereo image matching and point cloud generation.
Resulting .ply file cam be easily viewed using MeshLab ( http://meshlab.sourceforge.net/ )
'''









'''
    print('generating 3d point cloud...',)
    h, w = imgL.shape[:2]
    f = 0.8*w                          # guess for focal length
    Q = np.float32([[1, 0, 0, -0.5*w],
                    [0,-1, 0,  0.5*h], # turn points 180 deg around x-axis,
                    [0, 0, 0,     -f], # so that y-axis looks up
                    [0, 0, 1,      0]])
    points = cv.reprojectImageTo3D(disp, Q)
    colors = cv.cvtColor(imgL, cv.COLOR_BGR2RGB)
    mask = disp > disp.min()
    out_points = points[mask]
    out_colors = colors[mask]
    out_fn = 'out.ply'
    write_ply('out.ply', out_points, out_colors)
    print('%s saved' % 'out.ply')

    cv.imshow('left', imgL)
    cv.imshow('disparity', (disp-min_disp)/num_disp)
    '''










# Python 2/3 compatibility
from __future__ import print_function

import numpy as np
import cv2 as cv

ply_header = '''ply
format ascii 1.0
element vertex %(vert_num)d
property float x
property float y
property float z
property uchar red
property uchar green
property uchar blue
end_header
'''

def write_ply(fn, verts, colors):
    verts = verts.reshape(-1, 3)
    colors = colors.reshape(-1, 3)
    verts = np.hstack([verts, colors])
    with open(fn, 'wb') as f:
        f.write((ply_header % dict(vert_num=len(verts))).encode('utf-8'))
        np.savetxt(f, verts, fmt='%f %f %f %d %d %d ')


if __name__ == '__main__':
    print('loading images...')
    imset = 'rods'
    imgL = cv.pyrDown( cv.imread(imset+'1.png') )  # downscale images for faster processing
    imgR = cv.pyrDown( cv.imread(imset+'2.png') )

    # disparity range is tuned for 'aloe' image pair
    window_size = 3
    min_disp = 16
    num_disp = 112-min_disp
    stereo = cv.StereoSGBM_create(minDisparity = min_disp,
        numDisparities = num_disp,
        blockSize = 16,
        P1 = 8*3*window_size**2,
        P2 = 32*3*window_size**2,
        disp12MaxDiff = 10,
        uniquenessRatio = 10,
        speckleWindowSize = 100,
        speckleRange = 16
    )

    print('computing disparity...')
    disp = stereo.compute(imgL, imgR).astype(np.float32) / 16.0

    print('generating 3d point cloud...',)
    h, w = imgL.shape[:2]
    f = 0.8*w                          # guess for focal length
    Q = np.float32([[1, 0, 0, -0.5*w],
                    [0,-1, 0,  0.5*h], # turn points 180 deg around x-axis,
                    [0, 0, 0,     -f], # so that y-axis looks up
                    [0, 0, 1,      0]])
    points = cv.reprojectImageTo3D(disp, Q)
    colors = cv.cvtColor(imgL, cv.COLOR_BGR2RGB)
    mask = disp > disp.min()
    out_points = points[mask]
    out_colors = colors[mask]
    out_fn = 'out.ply'
    write_ply('out.ply', out_points, out_colors)
    print('%s saved' % 'out.ply')

    cv.imshow('left', imgL)
    cv.imshow('disparity', (disp-min_disp)/num_disp)
    cv.waitKey()
cv.destroyAllWindows()