use exponential compression:
q1: can any number up to 9^15+8^15+...+2^15+1 be represented by 9^a+8^b+...+2^z+1 where all powers are integers between 0 and 15 (inclusive)?
a1: no, does not work

q2: can any number up to 7*8^15+6*7^15+...+2^15+1 be represented by a*8^b+c*7^d+...+2^z+1 where all powers are integers between 0 and 15, and scalars are integers between 0 and 7 (inclusive)?
a2: no, doesn't appear to be able to work

q3: can any number be represented using power 16s?
a3: yes, or any other consistant base

q4: the above doesn't compress anything, can we track overflows?
a4: no, that's the same as just adding more bits onto the data

q5: what about a total shift, remember that we're trying to represent the data, not reproduce it. What about some kind of scanning window that can generate arbitrary data (akin to reading DNA to produce protiens)?
a5: can you clarify?

q6: can any number be generated by references of  a position and a length in a set of numbers?
a6: yes, set of numbers must be at least n^2 long where n=length of bits to represent (eg n=8 for 1 byte, so would need 64bits to represent all states). Arbitrary data can be obtained from such a set if multiple positions and lengths are referenced (might also provide better compression if data that's smaller than the reference size can be referenced directly)

q7: okay, how about this: if I have a multiplication table, but modified that if a>=b then a*b, else if b>a then a+b. Can that generate arbitrary data <max(a)*max(b)?
a7: yes if additional constraints are places that addition of 2 values, and that b<=2*a














value
0000000100100011010001010110011110001001101010111100110111101111
0000
0001
0010
0011
0100
0101
0110
0111
1000
1001
1010
1011
1100
1101
1110
1111


grey code
0000000100110010011001111111111011000100010111011001101110101000
0000
0001
0011
0010
0110
0111
1111
1110
1100
0100
0101
1101
1001
1011
1010
1000

rm repreat groups of 4
0000101101001111
1111010010110000
0000111100101101

alternatively: given that I want groups of n bits, what is the minimum configuration/number of bits needed to contain all groups?

eg n=2
0 0 1 1
n=3
00 01 01 11
n=4
0000 1011 0100 1111
n=5
00000 11111 01011000100 11011100101


require 2^n digits to see all configurations of n digits


n=4
data= 0110100001100101011011000110110001101111 (hello) = 5bytes
6,7 = 0110100
11,4 = 0011
4,5 = 00101
6,5 = 01101
0,4 = 1000
7,4 = 1101
0,4 = 1000
7,4 = 1101
13,3 = 111
9bytes

n=4
data=01001000011001010110110001101100011011110010110000100000011101110110111101110010011011000110010000101110 (Hello, world.) = 13bytes
reference=1111010010110000
5,6 = 010010
00011
00101
0110
11000
1101
1000
110
11110
0101100001
0000
00111
0111
0110
111101
1100
1001
1011000
1100
100001
0111
0
23bytes